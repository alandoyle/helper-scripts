#!/bin/bash
#
# setup-base-system is a simple command to set up a base Ubuntu 22.04/Debian 12 server.
#
# Copyright (C) 2022-2024 Alan Doyle
#
# https://github.com/alandoyle/helper-scripts/main/system/setup-base-system
#
# Usage:
#  sudo bash -c "$(wget -qLO - https://raw.githubusercontent.com/alandoyle/helper-scripts/main/system/setup-base-system)"
#
################################################################################
#
# Root check
#
if [ `id -u` -ne 0 ] ; then
    echo "ERROR: This script needs to be run as root or using sudo."
    exit 99
fi
#
################################################################################
#
if [ -f /etc/needrestart/needrestart.conf ] ; then
	echo "Setting 'needrestart' to AUTOMATIC"
	sed -i "/#\$nrconf{restart} = 'i';/s/.*/\$nrconf{restart} = 'a';/" /etc/needrestart/needrestart.conf
fi
#
################################################################################
#
echo "Upgrade system (please be patient)"
apt-get update &>/dev/null
apt-get -y dist-upgrade &>/dev/null
################################################################################
#
echo "Adding additional applications"
apt-get -y install vim aptitude lsscsi git curl gnupg p7zip p7zip-full unrar-free lm-sensors neofetch zip unzip btop exa iotop nala plocate rsync powertop &>/dev/null
#
#################################################################################
#
echo "Configuring applications"
if [ !  -f /etc/vim/vimrc.local ] ; then
    cat <<EOF >/etc/vim/vimrc.local
if filereadable("\$VIMRUNTIME/defaults.vim")
  source \$VIMRUNTIME/defaults.vim
endif
" now set the line that the defaults file is not reloaded afterwards!
let skip_defaults_vim = 1
" turn off mouse
set mouse=
" other override settings go here
syntax on
EOF
fi
#
################################################################################
#
grep -F bash.aliases /root/.bashrc &>/dev/null 2>&1
if [ $? -eq 0 ] ; then
	# Remove old modifications
 	cat /root/.bashrc | grep -v 'bash\.aliases' > /root/.bashrc.$$
	mv /root/.bashrc.$$ /root/.bashrc
fi
echo "[ -f /etc/bash.aliases ] && . /etc/bash.aliases" > /etc/profile.d/aliases.sh
cat <<EOF >/etc/bash.aliases

alias dfspace='df -hT -x udev -x tmpfs -x cgmfs -x snap -x devtmpfs -x fuse -x overlay -x efivarfs'
alias pg='less'
alias cls='clear'
alias btop='btop --utf-force'

# Change directory aliases
alias home='cd ~'
alias cd..='cd ..'

# cd into the old directory
alias bd='cd "\$OLDPWD"'

# Remove a directory and all files
alias rmd='/bin/rm  --recursive --force --verbose '

# Alias's for multiple directory listing commands
alias ls='exa -H --group-directories-first'
alias la='exa -alh' # show hidden files
alias lf='exa -aFh --color=always' # add colors and file type extensions
alias lx='exa -l --sort=ext' # sort by extension
alias lk='exa -l --sort=size' # sort by size
alias lc='exa -l --sort=mod' # sort by modified time
alias lu='exa -l --sort=acc' # sort by access time
alias lr='exa -lR' # recursive ls
alias lt='exa -l --sort=new' # sort by date
alias lm='exa -al |more' # pipe through 'more'
alias lw='exa -xa' # wide listing format
alias ll='exa -alF --group-directories-first' # long listing format
alias labc='exa -l --sort=name' #alphabetical sort
alias lff="exa -l | egrep -v '^d'" # files only
alias ldir="exa -l | egrep '^d'" # directories only

# Search command line history
alias h='history | grep '

# Alias's for archives
alias mktar='tar -cvf'
alias mkbz2='tar -cvjf'
alias mkgz='tar -cvzf'
alias untar='tar -xvf'
alias unbz2='tar -xvjf'
alias ungz='tar -xvzf'

# Extracts any archive(s) (if unp isn't installed)
extract () {
	for archive in "\$@"; do
		if [ -f "\$archive" ] ; then
			case \$archive in
				*.tar.bz2)   tar xvjf \$archive    ;;
				*.tar.gz)    tar xvzf \$archive    ;;
				*.bz2)       bunzip2 \$archive     ;;
				*.rar)       unrar -x \$archive    ;;
				*.gz)        gunzip \$archive      ;;
				*.tar)       tar xvf \$archive     ;;
				*.tbz2)      tar xvjf \$archive    ;;
				*.tgz)       tar xvzf \$archive    ;;
				*.zip)       unzip \$archive       ;;
				*.Z)         uncompress \$archive  ;;
				*.7z)        7z x \$archive        ;;
				*)           echo "don't know how to extract '\$archive'..." ;;
			esac
		else
			echo "'\$archive' is not a valid file!"
		fi
	done
}

# Disk usage support
function used() {
    du -h "\$1"| tail -1
}
function usedm() {
    du --block-size=1M "\$1" | tail -1
}
function usedg() {
    du --block-size=1G "\$1" | tail -1
}

# Docker support
alias dkup='docker compose up -d'
alias dkdn='docker compose down'
alias dkps='docker ps --format "table {{.Names}}\t{{.State}}\t{{.Status}}\t{{.Ports}}"'
alias dkrs='docker compose down && docker compose up -d'
function dkxc() {
    docker exec -it "\$1" /bin/sh
}

# sudo quick shortcuts
alias reboot='sudo reboot'
alias suvi='sudo vi'
alias sunano='sudo nano'
alias surm='sudo rm'
alias dmesg='sudo /usr/bin/dmesg'
alias mount='sudo /usr/bin/mount'
alias umount='sudo /usr/bin/umount'
alias iotop='sudo /usr/sbin/iotop'
alias apt='sudo nala'
alias powertop='sudo powertop'

EOF
#
################################################################################
#
cat <<EOF >/etc/starship.toml
# Simple starship.toml file
format = """
[ ](bg:#3B4252)\\
\$username\\
\$hostname\\
\$shell\\
[](fg:#3B4252 bg:#4C566A)\\
\$directory\\
[](fg:#4C566A bg:#86BBD8)\\
\$git_branch\\
\$git_commit\\
\$git_status\\
\$git_state\\
[](fg:#86BBD8)\\
\$sudo\\
\$nix_shell\\
\$cmd_duration\\
\$line_break\\
\$jobs\\
\$character\\
"""
command_timeout = 5000
add_newline = true

[username]
style_user = "white"
format = '[\$user](\$style bg:#3B4252)'

[hostname]
style = "bg:#3B4252"
format = "[@\$hostname ](\$style)"

[shell]
disabled = false
bash_indicator = ">_ "
fish_indicator = "><>"
zsh_indicator = "%_ "
powershell_indicator = ">>>"
cmd_indicator = "<<<"
unknown_indicator = "?_ "
style = "bg:#3B4252"
format = "[\$indicator](\$style)"

[directory]
truncation_length = 5
style = "bg:#4C566A"
format = "[ \$path ](\$style)"

[git_branch]
style = "bg:#86BBD8 fg:#3B4252"
format = '[ \$symbol$branch ](\$style)'

[git_commit]
style = "bg:#86BBD8 fg:#3B4252"
format = '[ \$hash ](\$style)'

[git_status]
style = "bg:#86BBD8 fg:#3B4252"
format = '[\$all_status\$ahead_behind](\$style)'

[git_state]
style = "bg:#86BBD8 fg:#3B4252"
format = '[ \$state(\$progress_current/\$progress_total)](\$style)'

[sudo]
allow_windows = true
disabled = false
symbol = '!'
style = 'bold green'
format = '[ \$symbol](\$style)'

[nix_shell]
impure_msg = '[❄️](bold blue)'
pure_msg = '[❄️](bold green)'
unknown_msg = '[❄️](bold yellow)'
format = ' \$state'

[cmd_duration]
min_time = 500
style = "fg:#eb7442"
format = " took [\$duration](\$style)"

[line_break]

[jobs]

[character]
success_symbol = '[-](bold green)'
# would be nice to have sudo module ehre
error_symbol = '[✕](bold red)'
vimcmd_symbol = '[N](bold blue) '
vimcmd_replace_one_symbol = '[R](bold red) '
vimcmd_replace_symbol = '[R](bold red) '
vimcmd_visual_symbol = "[V ](bold yellow)"
EOF
cat <<EOF >/etc/starship.root.toml
# Simple starship.toml file
format = """
[ ](bg:#5B0000)\\
\$username\\
\$hostname\\
\$shell\\
[](fg:#5B0000 bg:#A9191C)\\
\$directory\\
[](fg:#A9191C bg:#FF3535)\\
\$git_branch\\
\$git_commit\\
\$git_status\\
\$git_state\\
[](fg:#FF3535)\\
\$sudo\\
\$nix_shell\\
\$cmd_duration\\
\$line_break\\
\$jobs\\
\$character\\
"""
command_timeout = 5000
add_newline = true

[username]
style_user = "white"
format = '[\$user](\$style bg:#5B0000)'

[hostname]
style = "bg:#5B0000"
format = "[@\$hostname ](\$style)"

[shell]
disabled = false
bash_indicator = ">_ "
fish_indicator = "><>"
zsh_indicator = "%_ "
powershell_indicator = ">>>"
cmd_indicator = "<<<"
unknown_indicator = "?_ "
style = "bg:#5B0000"
format = "[\$indicator](\$style)"

[directory]
truncation_length = 5
style = "bg:#A9191C"
format = "[ \$path ](\$style)"

[git_branch]
style = "bg:#FF3535 fg:#5B0000"
format = '[ \$symbol\$branch ](\$style)'

[git_commit]
style = "bg:#FF3535 fg:#5B0000"
format = '[ \$hash ](\$style)'

[git_status]
style = "bg:#FF3535 fg:#5B0000"
format = '[\$all_status\$ahead_behind](\$style)'

[git_state]
style = "bg:#FF3535 fg:#5B0000"
format = '[ \$state(\$progress_current/\$progress_total)](\$style)'

[sudo]
allow_windows = true
disabled = false
symbol = '!'
style = 'bold red'
format = '[ \$symbol](\$style)'

[nix_shell]
impure_msg = '[❄️](bold blue)'
pure_msg = '[❄️](bold green)'
unknown_msg = '[❄️](bold yellow)'
format = ' \$state'

[cmd_duration]
min_time = 500
style = "fg:#eb7442"
format = " took [\$duration](\$style)"

[line_break]

[jobs]

[character]
success_symbol = '[-](bold green)'
# would be nice to have sudo module here
error_symbol = '[✕](bold red)'
vimcmd_symbol = '[N](bold blue) '
vimcmd_replace_one_symbol = '[R](bold red) '
vimcmd_replace_symbol = '[R](bold red) '
vimcmd_visual_symbol = "[V ](bold yellow)"
EOF
#
################################################################################
#
STARSHIP_URL=https://github.com/starship/starship/releases/latest/download/starship-x86_64-unknown-linux-gnu.tar.gz
if [ "`uname -m`" = "aarch64" ] ; then
	STARSHIP_URL=https://github.com/starship/starship/releases/latest/download/starship-aarch64-unknown-linux-musl.tar.gz
fi
curl --fail --silent --location --output /tmp/starship.tar.gz "${STARSHIP_URL}"
tar xvf /tmp/starship.tar.gz >/dev/null 2>&1
[ -f /usr/local/bin/starship ] && rm -f /usr/local/bin/starship
mv starship /usr/local/bin/starship
chown root:root /usr/local/bin/starship
rm -f /tmp/starship.tar.gz
#
################################################################################
#
echo "Updating profile"

[ -f /etc/profile.d/neofetch.sh ] && rm /etc/profile.d/neofetch.sh
cat <<EOF >/etc/profile.d/sysinfo.sh
if [ "\${SUDO_USER}" = "" ] ; then
	clear
	neofetch
fi
EOF

echo "export QUOTING_STYLE=literal" > /etc/profile.d/quoting_style.sh

cat <<EOF >/etc/profile.d/starship.sh
if [ -f /usr/local/bin/starship ] ; then
	[ ! -d ~/.config ] && mkdir -p ~/.config
	[ -f ~/.config/starship.toml ] && rm -f ~/.config/starship.toml
	if [ \`id -u\` -eq 0 ] ; then
		ln -sf /etc/starship.root.toml ~/.config/starship.toml
	else
		ln -sf /etc/starship.toml ~/.config/starship.toml
	fi
	eval "\$(starship init bash)"
fi
EOF

# Create a new .bash_aliases for root
cat <<EOF >/root/.bash_aliases
if [ "\${SUDO_USER}" != "" ] ; then
	. /etc/profile
fi
EOF

# Check if we're installing on Debian as it has a differnet /root/.bashrc to Ubuntu
. /etc/os-release
grep "PROFILE UPDATE" /root/.bashrc >/dev/null 2>&1
if [ $? -ne 0 -a "${ID}" = "debian" ] ; then
	echo "Updating /root/.bashrc"
	echo -e "#\n# PROFILE UPDATE\nif [ \"\${SUDO_USER}\" != \"\" ] ; then\n\t. /root/.bash_aliases\nfi" >> /root/.bashrc
fi
#
################################################################################
#
if [ ! -f /var/lib/plocate/plocate.db ] ; then
	echo "Updating plocate.db"
	updatedb
fi
#
################################################################################
