#!/bin/bash
#
# setup-base-system is a simple command to set up a base Ubuntu 22.04 server.
#
# Copyright (C) 2022-2024 Alan Doyle
#
# https://github.com/alandoyle/helper-scripts/main/system/setup-base-system
#
# Usage:
#  sudo bash -c "$(wget -qLO -  https://raw.githubusercontent.com/alandoyle/helper-scripts/main/system/setup-base-system)"
#
################################################################################
#
# Root check
#
if [ `id -u` -ne 0 ] ; then
    echo "ERROR: This script needs to be run as root or using sudo."
    exit 99
fi
#
################################################################################
#
if [ -f /etc/needrestart/needrestart.conf ] ; then
	echo "Setting 'needrestart' to AUTOMATIC"
	sed -i "/#\$nrconf{restart} = 'i';/s/.*/\$nrconf{restart} = 'a';/" /etc/needrestart/needrestart.conf
fi
#
################################################################################
#
echo "Upgrade system (please be patient)"
apt-get update &>/dev/null
apt-get -y dist-upgrade &>/dev/null
################################################################################
#
echo "Adding additional applications"
apt-get -y install vim aptitude lsscsi git curl gnupg p7zip p7zip-full unrar-free lm-sensors neofetch zip unzip btop &>/dev/null
#
#################################################################################
#
echo "Configuring applications"
if [ !  -f /etc/vim/vimrc.local ] ; then
    cat <<EOF >/etc/vim/vimrc.local
if filereadable("\$VIMRUNTIME/defaults.vim")
  source \$VIMRUNTIME/defaults.vim
endif
" now set the line that the defaults file is not reloaded afterwards!
let skip_defaults_vim = 1
" turn off mouse
set mouse=
" other override settings go here
syntax on
EOF
fi
#
################################################################################
#
grep -F bash.aliases /root/.bashrc &>/dev/null 2>&1
if [ $? -eq 0 ] ; then
	# Remove old modifications
 	cat /root/.bashrc | grep -v 'bash\.aliases' > /root/.bashrc.$$
	mv /root/.bashrc.$$ /root/.bashrc
fi
echo "[ -f /etc/bash.aliases ] && . /etc/bash.aliases" > /etc/profile.d/aliases.sh
cat <<EOF >/etc/bash.aliases

alias dfspace="df -hT -x udev -x tmpfs -x cgmfs -x snap -x devtmpfs -x fuse -x overlay"
alias pg="less"
alias cls="clear"
alias btop="btop --utf-force"

# Change directory aliases
alias home='cd ~'
alias cd..='cd ..'

# cd into the old directory
alias bd='cd "$OLDPWD"'

# Remove a directory and all files
alias rmd='/bin/rm  --recursive --force --verbose '

# Alias's for multiple directory listing commands
alias la='ls -Alh' # show hidden files
alias lf='ls -aFh --color=always' # add colors and file type extensions
alias lx='ls -lXBh' # sort by extension
alias lk='ls -lSrh' # sort by size
alias lc='ls -lcrh' # sort by change time
alias lu='ls -lurh' # sort by access time
alias lr='ls -lRh' # recursive ls
alias lt='ls -ltrh' # sort by date
alias lm='ls -alh |more' # pipe through 'more'
alias lw='ls -xAh' # wide listing format
alias ll='ls -Fls' # long listing format
alias labc='ls -lap' #alphabetical sort
alias lf="ls -l | egrep -v '^d'" # files only
alias ldir="ls -l | egrep '^d'" # directories only

# Search command line history
alias h="history | grep "

# Alias's for archives
alias mktar='tar -cvf'
alias mkbz2='tar -cvjf'
alias mkgz='tar -cvzf'
alias untar='tar -xvf'
alias unbz2='tar -xvjf'
alias ungz='tar -xvzf'

# Extracts any archive(s) (if unp isn't installed)
extract () {
	for archive in "\$@"; do
		if [ -f "\$archive" ] ; then
			case \$archive in
				*.tar.bz2)   tar xvjf \$archive    ;;
				*.tar.gz)    tar xvzf \$archive    ;;
				*.bz2)       bunzip2 \$archive     ;;
				*.rar)       unrar -x \$archive    ;;
				*.gz)        gunzip \$archive      ;;
				*.tar)       tar xvf \$archive     ;;
				*.tbz2)      tar xvjf \$archive    ;;
				*.tgz)       tar xvzf \$archive    ;;
				*.zip)       unzip \$archive       ;;
				*.Z)         uncompress \$archive  ;;
				*.7z)        7z x \$archive        ;;
				*)           echo "don't know how to extract '\$archive'..." ;;
			esac
		else
			echo "'\$archive' is not a valid file!"
		fi
	done
}

# Disk usage support
function used() {
    du -h "\$1"| tail -1
}
function usedm() {
    du --block-size=1M "\$1" | tail -1
}
function usedg() {
    du --block-size=1G "\$1" | tail -1
}

# Docker support
alias dkup='docker compose up -d'
alias dkdn='docker compose down'
alias dkps='docker ps --format "table {{.Names}}\t{{.State}}\t{{.Status}}\t{{.Ports}}"'
alias dkrs='docker compose down && docker compose up -d'
function dkxc() {
    docker exec -it "\$1" /bin/sh
}
EOF
#
################################################################################
#
cat <<EOF >/etc/starship.toml
format = """
\$username\\
\$hostname\\
[](fg:#3B4252 bg:#434C5E)\\
\$directory\\
[](fg:#434C5E bg:#4C566A)\\
\$git_branch\\
\$git_status\\
\$git_commit\\
[](fg:#4C566A bg:#5E969A)\\
\$battery\\
[](fg:#5E969A)\\
[ ](fg:#FFFFFF)\\
"""
command_timeout = 5000
# Disable the blank line at the start of the prompt
add_newline = false

# You can also replace your username with a neat symbol like  to save some space
[username]
show_always = true
style_user = "bg:#3B4252"
style_root = "bg:#3B4252"
format = '[ \$user](\$style)'

[hostname]
ssh_only = false
ssh_symbol = ' '
format = "[@\$hostname\$ssh_symbol ](\$style)"
trim_at = "-"
style = "bg:#3B4252"
disabled = false

[directory]
style = "bg:#434C5E"
format = "[ \$path ](\$style)"
truncation_length = 3

# Here is how you can shorten some long paths by text replacement
# similar to mapped_locations in Oh My Posh:
[directory.substitutions]
"Documents" = " "
"Downloads" = " "
"Music" = " "
"Pictures" = " "
# Keep in mind that the order matters. For example:
# "Important Documents" = "  "
# will not be replaced, because "Documents" was already substituted before.
# So either put "Important Documents" before "Documents" or use the substituted version:
# "Important  " = "  "

[git_branch]
symbol = ""
style = "bg:#4C566A"
format = '[ \$symbol \$branch ](\$style)'

[git_status]
style = "bg:#4C566A"
format = '[\$all_status\$ahead_behind ](\$style)'

[git_commit]
style = "bg:#4C566A"
commit_hash_length = 8

[battery]
full_symbol = "🔋"
charging_symbol = "🔌"
discharging_symbol = "⚡"
style = "bg:#5E969A"
format = '[ \$symbol \$percentage ](\$style)'

[[battery.display]]
threshold = 30
style = "bold red bg:#5E969A"

[character]
error_symbol = "[✖](bold red) "

[cmd_duration]
min_time = 10_000  # Show command duration over 10,000 milliseconds (=10 sec)
format = " took [\$duration](\$style)"
EOF
#
################################################################################
#
curl --fail --silent --location --output /tmp/starship.tar.gz https://github.com/starship/starship/releases/latest/download/starship-x86_64-unknown-linux-gnu.tar.gz
tar xvf /tmp/starship.tar.gz >/dev/null 2>&1
[ -f /usr/local/bin/starship ] && rm -f /usr/local/bin/starship
mv starship /usr/local/bin/starship
chown root:root /usr/local/bin/starship
rm -f /tmp/starship.tar.gz
#
################################################################################
#
echo "Updating profile"
echo -e "clear\nneofetch" > /etc/profile.d/neofetch.sh
echo "export QUOTING_STYLE=literal" > /etc/profile.d/quoting_style.sh
cat <<EOF >/etc/profile.d/starship.sh
if [ -f /usr/local/bin/starship ] ; then
	[ ! -d ~/.config ] && mkdir -p ~/.config
	[ -f ~/.config/starship.toml ] && rm -f ~/.config/starship.toml
	ln -sf /etc/starship.toml ~/.config/starship.toml
	eval "\$(starship init bash)"
fi
EOF
if [ ! -f /root/.bash_aliases ] ; then
	cat <<EOF >/root/.bash_aliases
[ -f /etc/profile.d/quoting_style.sh ] && . /etc/profile.d/quoting_style.sh
[ -f /etc/profile.d/aliases.sh ]       && . /etc/profile.d/aliases.sh
[ -f /etc/profile.d/extra-paths.sh ]   && . /etc/profile.d/extra-paths.sh
EOF
fi
#
################################################################################
